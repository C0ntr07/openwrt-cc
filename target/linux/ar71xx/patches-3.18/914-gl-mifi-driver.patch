--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@ -1025,6 +1025,7 @@ static const struct usb_device_id option
 	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7A) },
 	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7B) },
 	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7C) },
+	{ USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, 0xff, 0x06, 0x7D) },
 
 
 	{ USB_DEVICE(NOVATELWIRELESS_VENDOR_ID, NOVATELWIRELESS_PRODUCT_V640) },
@@ -1802,6 +1803,9 @@ static const struct usb_device_id option
 	{ USB_DEVICE_INTERFACE_CLASS(0x2020, 0x4000, 0xff) },                /* OLICARD300 - MT6225 */
 	{ USB_DEVICE(INOVIA_VENDOR_ID, INOVIA_SEW858) },
 	{ USB_DEVICE(VIATELECOM_VENDOR_ID, VIATELECOM_PRODUCT_CDS7) },
+	{ USB_DEVICE(0x05C6, 0x9090) }, //For Quectell UC15
+	{ USB_DEVICE(0x05C6, 0x9003) }, //For Quectel UC20
+	{ USB_DEVICE(0x05C6, 0x9215) }, //For Quectel EC20
 	{ } /* Terminating entry */
 };
 MODULE_DEVICE_TABLE(usb, option_ids);
@@ -1836,6 +1840,7 @@ static struct usb_serial_driver option_1
 #ifdef CONFIG_PM
 	.suspend           = usb_wwan_suspend,
 	.resume            = usb_wwan_resume,
+	.reset_resume      = usb_wwan_resume,
 #endif
 };
 
@@ -1916,6 +1921,11 @@ static int option_attach(struct usb_seri
 	struct usb_wwan_intf_private *data;
 	struct option_private *priv;
 
+	if (serial->dev->descriptor.idVendor == HUAWEI_VENDOR_ID) {
+		if ( 0 != (serial->dev->config->desc.bmAttributes & 0x20)){
+		usb_enable_autosuspend(serial->dev);
+		}
+	}
 	data = kzalloc(sizeof(struct usb_wwan_intf_private), GFP_KERNEL);
 	if (!data)
 		return -ENOMEM;
--- a/drivers/usb/serial/qcserial.c
+++ b/drivers/usb/serial/qcserial.c
@@ -90,7 +90,6 @@ static const struct usb_device_id id_tab
 	{USB_DEVICE(0x03f0, 0x241d)},	/* HP Gobi 2000 QDL device (VP412) */
 	{USB_DEVICE(0x03f0, 0x251d)},	/* HP Gobi 2000 Modem device (VP412) */
 	{USB_DEVICE(0x05c6, 0x9214)},	/* Acer Gobi 2000 QDL device (VP413) */
-	{USB_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
 	{USB_DEVICE(0x05c6, 0x9264)},	/* Asus Gobi 2000 QDL device (VR305) */
 	{USB_DEVICE(0x05c6, 0x9265)},	/* Asus Gobi 2000 Modem device (VR305) */
 	{USB_DEVICE(0x05c6, 0x9234)},	/* Top Global Gobi 2000 QDL device (VR306) */
--- a/drivers/usb/serial/usb-wwan.h
+++ b/drivers/usb/serial/usb-wwan.h
@@ -30,6 +30,8 @@ extern int usb_wwan_resume(struct usb_se
 #define N_OUT_URB 4
 #define IN_BUFLEN 4096
 #define OUT_BUFLEN 4096
+#define HW_bcdUSB 0x0110
+#define HUAWEI_VENDOR_ID 0x12d1
 
 struct usb_wwan_intf_private {
 	spinlock_t susp_lock;
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -186,6 +186,7 @@ int usb_wwan_write(struct tty_struct *tt
 	int i;
 	int left, todo;
 	struct urb *this_urb = NULL;	/* spurious */
+	struct usb_host_endpoint *ep=NULL;
 	int err;
 	unsigned long flags;
 
@@ -222,6 +223,15 @@ int usb_wwan_write(struct tty_struct *tt
 		memcpy(this_urb->transfer_buffer, buf, todo);
 		this_urb->transfer_buffer_length = todo;
 
+		if((HUAWEI_VENDOR_ID == port->serial->dev->descriptor.idVendor)
+			&& (HW_bcdUSB != port->serial->dev->descriptor.bcdUSB)){
+		ep = usb_pipe_endpoint(this_urb->dev, this_urb->pipe);
+		if(ep && (0 != this_urb->transfer_buffer_length)
+				&& (0 == this_urb->transfer_buffer_length %
+					ep->desc.wMaxPacketSize)){
+			this_urb->transfer_flags |= URB_ZERO_PACKET;
+			}
+		}
 		spin_lock_irqsave(&intfdata->susp_lock, flags);
 		if (intfdata->suspended) {
 			usb_anchor_urb(this_urb, &portdata->delayed);
@@ -471,6 +481,12 @@ static struct urb *usb_wwan_setup_urb(st
 			  usb_sndbulkpipe(serial->dev, endpoint) | dir,
 			  buf, len, callback, ctx);
 
+	if (dir == USB_DIR_OUT) {
+		struct usb_device_descriptor *desc = &serial->dev->descriptor;
+		if (desc->idVendor == 0x05C6 && (desc->idProduct == 0x9003 || desc->idProduct ==
+					0x9090 || desc->idProduct == 0x9215))
+			urb->transfer_flags |= URB_ZERO_PACKET;
+		}
 	return urb;
 }
 
